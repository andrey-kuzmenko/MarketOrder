@using MarketOrder.Models
@*@model IEnumerable<ProductView>*@
@model ProductModel

@{
    ViewBag.Title = "Index";
}

@section Scripts {
    <script type="text/javascript" src="@Url.Content("~/Scripts/knockout-3.5.1.js")"></script> <!--TODO: Bundle-->
    @*
        <script type="text/javascript">

            function AppViewModel() {
                var self = this;

                self.ItemVM = function (model) {
                    var inner = this;

                    inner.Name = model.Name;
                    inner.Item = ko.observable(model);

                    //ko.mapping.fromJS(model, {}, inner);

                    inner.ProductPrice = ko.computed(function () {
                        /*var price = inner.Item().Price;
                        return price ? price.toFixed(2) : '0.00';*/
                        return '7.77';
                    });
                };

                self.ProductsVM = function (model) {
                    var inner = this;

                    inner.SelectedItem = ko.observable({});
                    inner.Available = ko.observableArray([]);

                    inner.Discount = ko.observable();
                    /*inner.Total = ko.computed(function () {
                        var total = +inner.SelectedItem().Price - +inner.Discount();
                        return total.toFixed(2);
                    });*/

                    if (model) {
                        inner.SelectedItem(new self.ItemVM(model.products[0]));
                        inner.Available.push.apply(inner.Available, model.products);
                    };
                };

                self.vm = {
                    Products: ko.observable({
                        SelectedItem: ko.observable({})
                    }),
                    Order: ko.observable({}),
                    Shipment: ko.observable({})
                };

                self.getProductsUrl = '/Product/List';
                self.init = function () {
                    $.get(self.getProductsUrl, function (response) {
                        //self.availableProducts.push.apply(self.availableProducts, response.products);
                        self.vm.Products(new self.ProductsVM(response));
                    });
                };
            };

            $(document).ready(function () {
                var viewModel = new AppViewModel();
                ko.applyBindings(viewModel);
                viewModel.init();
            });
        </script>
    *@

    <script type="text/javascript">
        function PlatformsViewModel () {
            var self = this;

            self.platforms = ko.observableArray();
            self.message = ko.observable();

            //new observable to hold selected platform
            self.selectedPlatform = ko.observable();
            //subscribe to changes in the observable value to trigger the loading
            self.selectedPlatform.subscribe(function (newValue) {
                alert(newValue);
            });

            self.getProductsUrl = '/Product/List';
            self.init = function () {
                $.get(self.getProductsUrl, function (response) {
                    self.platforms.push.apply(self.platforms, response.products);
                    //self.vm.Products(new self.ProductsVM(response));
                });
            };
        }

        $(document).ready(function () {
            var view = new PlatformsViewModel();
            ko.applyBindings(view);
            view.init();
        });
        
    </script>

    @*
        <script type="text/javascript">

            function getProduct(data) {
                $.ajax({
                    url: "/Product/Item",
                    data: { id: data.value },
                    type: "GET",
                    dataType: "json",
                    success: function (res) {
                        $('input[name=price]').val(res.data.Price).trigger('change');
                    }
                    //TODO: error handling
                });
            }

            function getTotal() {
                var total = parseFloat($('input[name=price]').val());
                var discount = parseFloat($('input[name=discount]').val());
                if (isNaN(discount))
                    discount = 0.0;
                total -= discount;
                $('input[name=total]').val(total.toFixed(2));
            }

            $(':input').on('change', getTotal);

            $("form[name=productAdd]").submit(function (event) {
                event.preventDefault();

                var $form = $(this);

                $.ajax({
                    url: $form.attr('action'),
                    data: {
                        product: $('select[name=product]').children("option:selected").attr('value'),
                        total: $('input[name=total]').val()
                    },
                    type: $form.attr('method'),
                    dataType: "json",
                    success: function (res) {
                        alert('success');
                    }
                    //TODO: error handling
                });
            });
        </script>
    *@
}

    <select data-bind="options: platforms, optionsText: 'Name', value: selectedPlatform, optionsCaption: 'Choose...'"></select>

    <tbody>
        <tr>
            <!--
        <td>
            <select data-bind="
                    options: $root.vm.Products().Available,
                    optionsText: 'Name',
                    value: $root.vm.Products().SelectedItem"></select>
        </td>
        <td>
            <input type="text" data-bind="value: $root.vm.Products().SelectedItem().ProductPrice">
        </td>
        <td data-bind="text: $root.vm.Products().SelectedItem().ProductPrice"></td>
        <td>
            <input type="number" value="" min="0.00" data-bind="value: $root.vm.Products().Discount" placeholder="Discount" step="0.01" pattern="^\$\d{1,3}(,\d{3})*(\.\d+)?$">
        </td>
        <td data-bind="text: total"></td>
            -->
        </tr>
    </tbody>
<!--<button data-bind="click: addSeat" class="btn btn-primary">Add</button>-->
